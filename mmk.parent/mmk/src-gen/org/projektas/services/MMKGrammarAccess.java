/*
 * generated by Xtext 2.10.0
 */
package org.projektas.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MMKGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMMKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cMMKKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Model:
		//	"<MMK"
		//	elements+=AbstractElement*
		//	"MMK>";
		@Override public ParserRule getRule() { return rule; }
		
		//"<MMK" elements+=AbstractElement* "MMK>"
		public Group getGroup() { return cGroup; }
		
		//"<MMK"
		public Keyword getMMKKeyword_0() { return cMMKKeyword_0; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
		
		//"MMK>"
		public Keyword getMMKKeyword_2() { return cMMKKeyword_2; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractElement:
		//	Statement | Condition | WhileExpression | Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement | Condition | WhileExpression | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }
		
		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_2() { return cWhileExpressionParserRuleCall_2; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_3() { return cOperationParserRuleCall_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Statement");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Expresions 
		//Statement:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGetLineExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGetNumExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrintExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	UnaryExpression | CreationExpression | AssignmentExpression | GetLineExpression | GetNumExpression | PrintExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression | CreationExpression | AssignmentExpression | GetLineExpression | GetNumExpression | PrintExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//CreationExpression
		public RuleCall getCreationExpressionParserRuleCall_1() { return cCreationExpressionParserRuleCall_1; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall_2() { return cAssignmentExpressionParserRuleCall_2; }
		
		//GetLineExpression
		public RuleCall getGetLineExpressionParserRuleCall_3() { return cGetLineExpressionParserRuleCall_3; }
		
		//GetNumExpression
		public RuleCall getGetNumExpressionParserRuleCall_4() { return cGetNumExpressionParserRuleCall_4; }
		
		//PrintExpression
		public RuleCall getPrintExpressionParserRuleCall_5() { return cPrintExpressionParserRuleCall_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Type");
		private final RuleCall cPrimitiveTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type:
		//	PrimitiveType;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall() { return cPrimitiveTypeParserRuleCall; }
	}
	public class GetLineExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.GetLineExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCGetLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhatValueParserRuleCall_1_0 = (RuleCall)cWhatAssignment_1.eContents().get(0);
		
		//GetLineExpression:
		//	"c.getLine" what=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//"c.getLine" what=Value
		public Group getGroup() { return cGroup; }
		
		//"c.getLine"
		public Keyword getCGetLineKeyword_0() { return cCGetLineKeyword_0; }
		
		//what=Value
		public Assignment getWhatAssignment_1() { return cWhatAssignment_1; }
		
		//Value
		public RuleCall getWhatValueParserRuleCall_1_0() { return cWhatValueParserRuleCall_1_0; }
	}
	public class GetNumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.GetNumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCGetNumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhatValueParserRuleCall_1_0 = (RuleCall)cWhatAssignment_1.eContents().get(0);
		
		//GetNumExpression:
		//	"c.getNum" what=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//"c.getNum" what=Value
		public Group getGroup() { return cGroup; }
		
		//"c.getNum"
		public Keyword getCGetNumKeyword_0() { return cCGetNumKeyword_0; }
		
		//what=Value
		public Assignment getWhatAssignment_1() { return cWhatAssignment_1; }
		
		//Value
		public RuleCall getWhatValueParserRuleCall_1_0() { return cWhatValueParserRuleCall_1_0; }
	}
	public class PrintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.PrintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCPrintLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhatValueParserRuleCall_1_0 = (RuleCall)cWhatAssignment_1.eContents().get(0);
		
		//PrintExpression:
		//	"c.printL" what=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//"c.printL" what=Value
		public Group getGroup() { return cGroup; }
		
		//"c.printL"
		public Keyword getCPrintLKeyword_0() { return cCPrintLKeyword_0; }
		
		//what=Value
		public Assignment getWhatAssignment_1() { return cWhatAssignment_1; }
		
		//Value
		public RuleCall getWhatValueParserRuleCall_1_0() { return cWhatValueParserRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}
	public class ExprBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.ExprBody");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprFactorExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//ExprBody:
		//	expr+=FactorExpression+;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=FactorExpression+
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//FactorExpression
		public RuleCall getExprFactorExpressionParserRuleCall_0() { return cExprFactorExpressionParserRuleCall_0; }
	}
	public class FactorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.FactorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLPrimaryParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAArithmeticsParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//FactorExpression:
		//	l=Primary a+=Arithmetics*;
		@Override public ParserRule getRule() { return rule; }
		
		//l=Primary a+=Arithmetics*
		public Group getGroup() { return cGroup; }
		
		//l=Primary
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//Primary
		public RuleCall getLPrimaryParserRuleCall_0_0() { return cLPrimaryParserRuleCall_0_0; }
		
		//a+=Arithmetics*
		public Assignment getAAssignment_1() { return cAAssignment_1; }
		
		//Arithmetics
		public RuleCall getAArithmeticsParserRuleCall_1_0() { return cAArithmeticsParserRuleCall_1_0; }
	}
	public class ArithmeticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Arithmetics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cMAlternatives_0_0 = (Alternatives)cMAssignment_0.eContents().get(0);
		private final Keyword cMAsteriskKeyword_0_0_0 = (Keyword)cMAlternatives_0_0.eContents().get(0);
		private final Keyword cMSolidusKeyword_0_0_1 = (Keyword)cMAlternatives_0_0.eContents().get(1);
		private final Keyword cMPlusSignKeyword_0_0_2 = (Keyword)cMAlternatives_0_0.eContents().get(2);
		private final Keyword cMHyphenMinusKeyword_0_0_3 = (Keyword)cMAlternatives_0_0.eContents().get(3);
		private final Assignment cRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRPrimaryParserRuleCall_1_0 = (RuleCall)cRAssignment_1.eContents().get(0);
		
		//Arithmetics:
		//	m=("*" | "/" | "+" | "-") r=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//m=("*" | "/" | "+" | "-") r=Primary
		public Group getGroup() { return cGroup; }
		
		//m=("*" | "/" | "+" | "-")
		public Assignment getMAssignment_0() { return cMAssignment_0; }
		
		//("*" | "/" | "+" | "-")
		public Alternatives getMAlternatives_0_0() { return cMAlternatives_0_0; }
		
		//"*"
		public Keyword getMAsteriskKeyword_0_0_0() { return cMAsteriskKeyword_0_0_0; }
		
		//"/"
		public Keyword getMSolidusKeyword_0_0_1() { return cMSolidusKeyword_0_0_1; }
		
		//"+"
		public Keyword getMPlusSignKeyword_0_0_2() { return cMPlusSignKeyword_0_0_2; }
		
		//"-"
		public Keyword getMHyphenMinusKeyword_0_0_3() { return cMHyphenMinusKeyword_0_0_3; }
		
		//r=Primary
		public Assignment getRAssignment_1() { return cRAssignment_1; }
		
		//Primary
		public RuleCall getRPrimaryParserRuleCall_1_0() { return cRPrimaryParserRuleCall_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cFactorExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary:
		//	UnaryExpression | '(' FactorExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression | '(' FactorExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//'(' FactorExpr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//FactorExpr
		public RuleCall getFactorExprParserRuleCall_1_1() { return cFactorExprParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class FactorExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.FactorExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLPrimaryParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAArithmeticsParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//FactorExpr:
		//	l=Primary a+=Arithmetics*;
		@Override public ParserRule getRule() { return rule; }
		
		//l=Primary a+=Arithmetics*
		public Group getGroup() { return cGroup; }
		
		//l=Primary
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//Primary
		public RuleCall getLPrimaryParserRuleCall_0_0() { return cLPrimaryParserRuleCall_0_0; }
		
		//a+=Arithmetics*
		public Assignment getAAssignment_1() { return cAAssignment_1; }
		
		//Arithmetics
		public RuleCall getAArithmeticsParserRuleCall_1_0() { return cAArithmeticsParserRuleCall_1_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValValueParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Assignment cUsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsUnarySuffixParserRuleCall_1_0 = (RuleCall)cUsAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//	val=Value us=UnarySuffix?;
		@Override public ParserRule getRule() { return rule; }
		
		//val=Value us=UnarySuffix?
		public Group getGroup() { return cGroup; }
		
		//val=Value
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//Value
		public RuleCall getValValueParserRuleCall_0_0() { return cValValueParserRuleCall_0_0; }
		
		//us=UnarySuffix?
		public Assignment getUsAssignment_1() { return cUsAssignment_1; }
		
		//UnarySuffix
		public RuleCall getUsUnarySuffixParserRuleCall_1_0() { return cUsUnarySuffixParserRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cVarVariableCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarVariableQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cVarVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValPrimitiveValueParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Value:
		//	var=[Variable|QualifiedName] | val=PrimitiveValue;
		@Override public ParserRule getRule() { return rule; }
		
		//var=[Variable|QualifiedName] | val=PrimitiveValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=[Variable|QualifiedName]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[Variable|QualifiedName]
		public CrossReference getVarVariableCrossReference_0_0() { return cVarVariableCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getVarVariableQualifiedNameParserRuleCall_0_0_1() { return cVarVariableQualifiedNameParserRuleCall_0_0_1; }
		
		//val=PrimitiveValue
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//PrimitiveValue
		public RuleCall getValPrimitiveValueParserRuleCall_1_0() { return cValPrimitiveValueParserRuleCall_1_0; }
	}
	public class CreationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.CreationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValExprBodyParserRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//CreationExpression:
		//	type=Type name=Variable ("=" val=ExprBody)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=Variable ("=" val=ExprBody)?
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=Variable
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Variable
		public RuleCall getNameVariableParserRuleCall_1_0() { return cNameVariableParserRuleCall_1_0; }
		
		//("=" val=ExprBody)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//val=ExprBody
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//ExprBody
		public RuleCall getValExprBodyParserRuleCall_2_1_0() { return cValExprBodyParserRuleCall_2_1_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cNameVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExprBodyParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//AssignmentExpression:
		//	name=[Variable|QualifiedName] "=" val=ExprBody;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Variable|QualifiedName] "=" val=ExprBody
		public Group getGroup() { return cGroup; }
		
		//name=[Variable|QualifiedName]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Variable|QualifiedName]
		public CrossReference getNameVariableCrossReference_0_0() { return cNameVariableCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getNameVariableQualifiedNameParserRuleCall_0_0_1() { return cNameVariableQualifiedNameParserRuleCall_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=ExprBody
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//ExprBody
		public RuleCall getValExprBodyParserRuleCall_2_0() { return cValExprBodyParserRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondConditionalExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAbstractElementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElseAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cElseAbstractElementParserRuleCall_5_2_0 = (RuleCall)cElseAssignment_5_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//// check the same as if
		//Condition:
		//	"check" cond=ConditionalExpr
		//	"<"
		//	then+=AbstractElement*
		//	">" (=> "else" "<"
		//	else+=AbstractElement*
		//	">")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"check" cond=ConditionalExpr "<" then+=AbstractElement* ">" (=> "else" "<" else+=AbstractElement* ">")?
		public Group getGroup() { return cGroup; }
		
		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//cond=ConditionalExpr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//ConditionalExpr
		public RuleCall getCondConditionalExprParserRuleCall_1_0() { return cCondConditionalExprParserRuleCall_1_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//then+=AbstractElement*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AbstractElement
		public RuleCall getThenAbstractElementParserRuleCall_3_0() { return cThenAbstractElementParserRuleCall_3_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//(=> "else" "<" else+=AbstractElement* ">")?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_5_1() { return cLessThanSignKeyword_5_1; }
		
		//else+=AbstractElement*
		public Assignment getElseAssignment_5_2() { return cElseAssignment_5_2; }
		
		//AbstractElement
		public RuleCall getElseAbstractElementParserRuleCall_5_2_0() { return cElseAbstractElementParserRuleCall_5_2_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_5_3() { return cGreaterThanSignKeyword_5_3; }
	}
	public class ConditionalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.ConditionalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprBodyParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExprBodyParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//ConditionalExpr:
		//	left=ExprBody op=("<" | "<=" | ">" | ">=" | "==" | "!=") right=ExprBody;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ExprBody op=("<" | "<=" | ">" | ">=" | "==" | "!=") right=ExprBody
		public Group getGroup() { return cGroup; }
		
		//left=ExprBody
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ExprBody
		public RuleCall getLeftExprBodyParserRuleCall_0_0() { return cLeftExprBodyParserRuleCall_0_0; }
		
		//op=("<" | "<=" | ">" | ">=" | "==" | "!=")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//("<" | "<=" | ">" | ">=" | "==" | "!=")
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_0() { return cOpLessThanSignKeyword_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_2() { return cOpGreaterThanSignKeyword_1_0_2; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_0_3; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_4() { return cOpEqualsSignEqualsSignKeyword_1_0_4; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_5() { return cOpExclamationMarkEqualsSignKeyword_1_0_5; }
		
		//right=ExprBody
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//ExprBody
		public RuleCall getRightExprBodyParserRuleCall_2_0() { return cRightExprBodyParserRuleCall_2_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsQualifiedNameParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsQualifiedNameParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Keyword cLessThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyExpressionParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cFKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Operation:
		//	'<F' name=QualifiedName
		//	'(' (params+=QualifiedName (',' params+=QualifiedName)*)? ')'
		//	':' type=Type
		//	'<'
		//	body=Expression
		//	'>'
		//	'F>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<F' name=QualifiedName '(' (params+=QualifiedName (',' params+=QualifiedName)*)? ')' ':' type=Type '<' body=Expression
		//'>' 'F>'
		public Group getGroup() { return cGroup; }
		
		//'<F'
		public Keyword getFKeyword_0() { return cFKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=QualifiedName (',' params+=QualifiedName)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=QualifiedName
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//QualifiedName
		public RuleCall getParamsQualifiedNameParserRuleCall_3_0_0() { return cParamsQualifiedNameParserRuleCall_3_0_0; }
		
		//(',' params+=QualifiedName)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=QualifiedName
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//QualifiedName
		public RuleCall getParamsQualifiedNameParserRuleCall_3_1_1_0() { return cParamsQualifiedNameParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=Type
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_6_0() { return cTypeTypeParserRuleCall_6_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_7() { return cLessThanSignKeyword_7; }
		
		//body=Expression
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_8_0() { return cBodyExpressionParserRuleCall_8_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_9() { return cGreaterThanSignKeyword_9; }
		
		//'F>'
		public Keyword getFKeyword_10() { return cFKeyword_10; }
	}
	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndConditionalExprParserRuleCall_1_0 = (RuleCall)cEndAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLoopAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLoopAbstractElementParserRuleCall_3_0 = (RuleCall)cLoopAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// till loop represents while
		//WhileExpression:
		//	"till" end=ConditionalExpr
		//	"<"
		//	loop+=AbstractElement*
		//	">";
		@Override public ParserRule getRule() { return rule; }
		
		//"till" end=ConditionalExpr "<" loop+=AbstractElement* ">"
		public Group getGroup() { return cGroup; }
		
		//"till"
		public Keyword getTillKeyword_0() { return cTillKeyword_0; }
		
		//end=ConditionalExpr
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }
		
		//ConditionalExpr
		public RuleCall getEndConditionalExprParserRuleCall_1_0() { return cEndConditionalExprParserRuleCall_1_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//loop+=AbstractElement*
		public Assignment getLoopAssignment_3() { return cLoopAssignment_3; }
		
		//AbstractElement
		public RuleCall getLoopAbstractElementParserRuleCall_3_0() { return cLoopAbstractElementParserRuleCall_3_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// misc
		//PrimitiveType:
		//	'num' | 'line';
		@Override public ParserRule getRule() { return rule; }
		
		//'num' | 'line'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'num'
		public Keyword getNumKeyword_0() { return cNumKeyword_0; }
		
		//'line'
		public Keyword getLineKeyword_1() { return cLineKeyword_1; }
	}
	public class PrimitiveValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.PrimitiveValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimitiveValue:
		//	INT | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.QualifiedName");
		private final RuleCall cVAR_NAMETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QualifiedName:
		//	VAR_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//VAR_NAME
		public RuleCall getVAR_NAMETerminalRuleCall() { return cVAR_NAMETerminalRuleCall; }
	}
	public class UnarySuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.UnarySuffix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnarySuffix:
		//	"++" | "--";
		@Override public ParserRule getRule() { return rule; }
		
		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final AbstractElementElements pAbstractElement;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final TypeElements pType;
	private final GetLineExpressionElements pGetLineExpression;
	private final GetNumExpressionElements pGetNumExpression;
	private final PrintExpressionElements pPrintExpression;
	private final VariableElements pVariable;
	private final ExprBodyElements pExprBody;
	private final FactorExpressionElements pFactorExpression;
	private final ArithmeticsElements pArithmetics;
	private final PrimaryElements pPrimary;
	private final FactorExprElements pFactorExpr;
	private final UnaryExpressionElements pUnaryExpression;
	private final ValueElements pValue;
	private final CreationExpressionElements pCreationExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final ConditionElements pCondition;
	private final ConditionalExprElements pConditionalExpr;
	private final OperationElements pOperation;
	private final WhileExpressionElements pWhileExpression;
	private final PrimitiveTypeElements pPrimitiveType;
	private final PrimitiveValueElements pPrimitiveValue;
	private final QualifiedNameElements pQualifiedName;
	private final UnarySuffixElements pUnarySuffix;
	private final TerminalRule tVAR_NAME;
	private final TerminalRule tML_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MMKGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pType = new TypeElements();
		this.pGetLineExpression = new GetLineExpressionElements();
		this.pGetNumExpression = new GetNumExpressionElements();
		this.pPrintExpression = new PrintExpressionElements();
		this.pVariable = new VariableElements();
		this.pExprBody = new ExprBodyElements();
		this.pFactorExpression = new FactorExpressionElements();
		this.pArithmetics = new ArithmeticsElements();
		this.pPrimary = new PrimaryElements();
		this.pFactorExpr = new FactorExprElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pValue = new ValueElements();
		this.pCreationExpression = new CreationExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pCondition = new ConditionElements();
		this.pConditionalExpr = new ConditionalExprElements();
		this.pOperation = new OperationElements();
		this.pWhileExpression = new WhileExpressionElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pPrimitiveValue = new PrimitiveValueElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pUnarySuffix = new UnarySuffixElements();
		this.tVAR_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.VAR_NAME");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.projektas.MMK.ML_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.projektas.MMK".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"<MMK"
	//	elements+=AbstractElement*
	//	"MMK>";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractElement:
	//	Statement | Condition | WhileExpression | Operation;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//// Expresions 
	//Statement:
	//	Expression;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression:
	//	UnaryExpression | CreationExpression | AssignmentExpression | GetLineExpression | GetNumExpression | PrintExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Type:
	//	PrimitiveType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//GetLineExpression:
	//	"c.getLine" what=Value;
	public GetLineExpressionElements getGetLineExpressionAccess() {
		return pGetLineExpression;
	}
	
	public ParserRule getGetLineExpressionRule() {
		return getGetLineExpressionAccess().getRule();
	}
	
	//GetNumExpression:
	//	"c.getNum" what=Value;
	public GetNumExpressionElements getGetNumExpressionAccess() {
		return pGetNumExpression;
	}
	
	public ParserRule getGetNumExpressionRule() {
		return getGetNumExpressionAccess().getRule();
	}
	
	//PrintExpression:
	//	"c.printL" what=Value;
	public PrintExpressionElements getPrintExpressionAccess() {
		return pPrintExpression;
	}
	
	public ParserRule getPrintExpressionRule() {
		return getPrintExpressionAccess().getRule();
	}
	
	//Variable:
	//	name=QualifiedName;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//ExprBody:
	//	expr+=FactorExpression+;
	public ExprBodyElements getExprBodyAccess() {
		return pExprBody;
	}
	
	public ParserRule getExprBodyRule() {
		return getExprBodyAccess().getRule();
	}
	
	//FactorExpression:
	//	l=Primary a+=Arithmetics*;
	public FactorExpressionElements getFactorExpressionAccess() {
		return pFactorExpression;
	}
	
	public ParserRule getFactorExpressionRule() {
		return getFactorExpressionAccess().getRule();
	}
	
	//Arithmetics:
	//	m=("*" | "/" | "+" | "-") r=Primary;
	public ArithmeticsElements getArithmeticsAccess() {
		return pArithmetics;
	}
	
	public ParserRule getArithmeticsRule() {
		return getArithmeticsAccess().getRule();
	}
	
	//Primary:
	//	UnaryExpression | '(' FactorExpr ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//FactorExpr:
	//	l=Primary a+=Arithmetics*;
	public FactorExprElements getFactorExprAccess() {
		return pFactorExpr;
	}
	
	public ParserRule getFactorExprRule() {
		return getFactorExprAccess().getRule();
	}
	
	//UnaryExpression:
	//	val=Value us=UnarySuffix?;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//Value:
	//	var=[Variable|QualifiedName] | val=PrimitiveValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//CreationExpression:
	//	type=Type name=Variable ("=" val=ExprBody)?;
	public CreationExpressionElements getCreationExpressionAccess() {
		return pCreationExpression;
	}
	
	public ParserRule getCreationExpressionRule() {
		return getCreationExpressionAccess().getRule();
	}
	
	//AssignmentExpression:
	//	name=[Variable|QualifiedName] "=" val=ExprBody;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//// check the same as if
	//Condition:
	//	"check" cond=ConditionalExpr
	//	"<"
	//	then+=AbstractElement*
	//	">" (=> "else" "<"
	//	else+=AbstractElement*
	//	">")?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ConditionalExpr:
	//	left=ExprBody op=("<" | "<=" | ">" | ">=" | "==" | "!=") right=ExprBody;
	public ConditionalExprElements getConditionalExprAccess() {
		return pConditionalExpr;
	}
	
	public ParserRule getConditionalExprRule() {
		return getConditionalExprAccess().getRule();
	}
	
	//Operation:
	//	'<F' name=QualifiedName
	//	'(' (params+=QualifiedName (',' params+=QualifiedName)*)? ')'
	//	':' type=Type
	//	'<'
	//	body=Expression
	//	'>'
	//	'F>';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//// till loop represents while
	//WhileExpression:
	//	"till" end=ConditionalExpr
	//	"<"
	//	loop+=AbstractElement*
	//	">";
	public WhileExpressionElements getWhileExpressionAccess() {
		return pWhileExpression;
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}
	
	//// misc
	//PrimitiveType:
	//	'num' | 'line';
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//PrimitiveValue:
	//	INT | STRING;
	public PrimitiveValueElements getPrimitiveValueAccess() {
		return pPrimitiveValue;
	}
	
	public ParserRule getPrimitiveValueRule() {
		return getPrimitiveValueAccess().getRule();
	}
	
	//QualifiedName:
	//	VAR_NAME;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//UnarySuffix:
	//	"++" | "--";
	public UnarySuffixElements getUnarySuffixAccess() {
		return pUnarySuffix;
	}
	
	public ParserRule getUnarySuffixRule() {
		return getUnarySuffixAccess().getRule();
	}
	
	//terminal VAR_NAME:
	//	'a'..'z' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getVAR_NAMERule() {
		return tVAR_NAME;
	}
	
	//terminal ML_COMMENT:
	//	'#MMK'->'MMK#';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
