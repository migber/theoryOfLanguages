/**
 * generated by Xtext 2.12.0-SNAPSHOT
 */
package org.projektas.mMK.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.projektas.mMK.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MMKFactoryImpl extends EFactoryImpl implements MMKFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MMKFactory init()
  {
    try
    {
      MMKFactory theMMKFactory = (MMKFactory)EPackage.Registry.INSTANCE.getEFactory(MMKPackage.eNS_URI);
      if (theMMKFactory != null)
      {
        return theMMKFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MMKFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MMKFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MMKPackage.MODEL: return createModel();
      case MMKPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case MMKPackage.STATEMENT: return createStatement();
      case MMKPackage.EXPRESSION: return createExpression();
      case MMKPackage.GET_LINE_EXPRESSION: return createGetLineExpression();
      case MMKPackage.GET_NUM_EXPRESSION: return createGetNumExpression();
      case MMKPackage.PRINT_EXPRESSION: return createPrintExpression();
      case MMKPackage.VARIABLE: return createVariable();
      case MMKPackage.EXPR_BODY: return createExprBody();
      case MMKPackage.FACTOR_EXPRESSION: return createFactorExpression();
      case MMKPackage.ARITHMETICS: return createArithmetics();
      case MMKPackage.PRIMARY: return createPrimary();
      case MMKPackage.FACTOR_EXPR: return createFactorExpr();
      case MMKPackage.UNARY_EXPRESSION: return createUnaryExpression();
      case MMKPackage.VALUE: return createValue();
      case MMKPackage.CREATION_EXPRESSION: return createCreationExpression();
      case MMKPackage.ASSIGNMENT_EXPRESSION: return createAssignmentExpression();
      case MMKPackage.CONDITION: return createCondition();
      case MMKPackage.CONDITIONAL_EXPR: return createConditionalExpr();
      case MMKPackage.OPERATION: return createOperation();
      case MMKPackage.WHILE_EXPRESSION: return createWhileExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GetLineExpression createGetLineExpression()
  {
    GetLineExpressionImpl getLineExpression = new GetLineExpressionImpl();
    return getLineExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GetNumExpression createGetNumExpression()
  {
    GetNumExpressionImpl getNumExpression = new GetNumExpressionImpl();
    return getNumExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrintExpression createPrintExpression()
  {
    PrintExpressionImpl printExpression = new PrintExpressionImpl();
    return printExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprBody createExprBody()
  {
    ExprBodyImpl exprBody = new ExprBodyImpl();
    return exprBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FactorExpression createFactorExpression()
  {
    FactorExpressionImpl factorExpression = new FactorExpressionImpl();
    return factorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Arithmetics createArithmetics()
  {
    ArithmeticsImpl arithmetics = new ArithmeticsImpl();
    return arithmetics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Primary createPrimary()
  {
    PrimaryImpl primary = new PrimaryImpl();
    return primary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FactorExpr createFactorExpr()
  {
    FactorExprImpl factorExpr = new FactorExprImpl();
    return factorExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CreationExpression createCreationExpression()
  {
    CreationExpressionImpl creationExpression = new CreationExpressionImpl();
    return creationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentExpression createAssignmentExpression()
  {
    AssignmentExpressionImpl assignmentExpression = new AssignmentExpressionImpl();
    return assignmentExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalExpr createConditionalExpr()
  {
    ConditionalExprImpl conditionalExpr = new ConditionalExprImpl();
    return conditionalExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileExpression createWhileExpression()
  {
    WhileExpressionImpl whileExpression = new WhileExpressionImpl();
    return whileExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MMKPackage getMMKPackage()
  {
    return (MMKPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MMKPackage getPackage()
  {
    return MMKPackage.eINSTANCE;
  }

} //MMKFactoryImpl
