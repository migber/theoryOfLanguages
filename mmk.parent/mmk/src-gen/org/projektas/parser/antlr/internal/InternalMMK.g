/*
 * generated by Xtext 2.12.0-SNAPSHOT
 */
grammar InternalMMK;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.projektas.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.projektas.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.projektas.services.MMKGrammarAccess;

}

@parser::members {

 	private MMKGrammarAccess grammarAccess;

    public InternalMMKParser(TokenStream input, MMKGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MMKGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<MMK'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getMMKKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsAbstractElementParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleAbstractElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"org.projektas.MMK.AbstractElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='MMK>'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getMMKKeyword_2());
		}
	)
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getStatementParserRuleCall_0());
		}
		this_Statement_0=ruleStatement
		{
			$current = $this_Statement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getConditionParserRuleCall_1());
		}
		this_Condition_1=ruleCondition
		{
			$current = $this_Condition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getWhileExpressionParserRuleCall_2());
		}
		this_WhileExpression_2=ruleWhileExpression
		{
			$current = $this_WhileExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getOperationParserRuleCall_3());
		}
		this_Operation_3=ruleOperation
		{
			$current = $this_Operation_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCreationExpressionParserRuleCall_1());
		}
		this_CreationExpression_1=ruleCreationExpression
		{
			$current = $this_CreationExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_2());
		}
		this_AssignmentExpression_2=ruleAssignmentExpression
		{
			$current = $this_AssignmentExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getGetLineExpressionParserRuleCall_3());
		}
		this_GetLineExpression_3=ruleGetLineExpression
		{
			$current = $this_GetLineExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getGetNumExpressionParserRuleCall_4());
		}
		this_GetNumExpression_4=ruleGetNumExpression
		{
			$current = $this_GetNumExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPrintExpressionParserRuleCall_5());
		}
		this_PrintExpression_5=rulePrintExpression
		{
			$current = $this_PrintExpression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall());
	}
	this_PrimitiveType_0=rulePrimitiveType
	{
		$current.merge(this_PrimitiveType_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleGetLineExpression
entryRuleGetLineExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetLineExpressionRule()); }
	iv_ruleGetLineExpression=ruleGetLineExpression
	{ $current=$iv_ruleGetLineExpression.current; }
	EOF;

// Rule GetLineExpression
ruleGetLineExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='c.getLine'
		{
			newLeafNode(otherlv_0, grammarAccess.getGetLineExpressionAccess().getCGetLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGetLineExpressionAccess().getWhatValueParserRuleCall_1_0());
				}
				lv_what_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetLineExpressionRule());
					}
					set(
						$current,
						"what",
						lv_what_1_0,
						"org.projektas.MMK.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGetNumExpression
entryRuleGetNumExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetNumExpressionRule()); }
	iv_ruleGetNumExpression=ruleGetNumExpression
	{ $current=$iv_ruleGetNumExpression.current; }
	EOF;

// Rule GetNumExpression
ruleGetNumExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='c.getNum'
		{
			newLeafNode(otherlv_0, grammarAccess.getGetNumExpressionAccess().getCGetNumKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGetNumExpressionAccess().getWhatValueParserRuleCall_1_0());
				}
				lv_what_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetNumExpressionRule());
					}
					set(
						$current,
						"what",
						lv_what_1_0,
						"org.projektas.MMK.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrintExpression
entryRulePrintExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintExpressionRule()); }
	iv_rulePrintExpression=rulePrintExpression
	{ $current=$iv_rulePrintExpression.current; }
	EOF;

// Rule PrintExpression
rulePrintExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='c.printL'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintExpressionAccess().getCPrintLKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintExpressionAccess().getWhatValueParserRuleCall_1_0());
				}
				lv_what_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintExpressionRule());
					}
					set(
						$current,
						"what",
						lv_what_1_0,
						"org.projektas.MMK.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVariableAccess().getNameQualifiedNameParserRuleCall_0());
			}
			lv_name_0_0=ruleQualifiedName
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVariableRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"org.projektas.MMK.QualifiedName");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExprBody
entryRuleExprBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprBodyRule()); }
	iv_ruleExprBody=ruleExprBody
	{ $current=$iv_ruleExprBody.current; }
	EOF;

// Rule ExprBody
ruleExprBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExprBodyAccess().getExprFactorExpressionParserRuleCall_0());
			}
			lv_expr_0_0=ruleFactorExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExprBodyRule());
				}
				add(
					$current,
					"expr",
					lv_expr_0_0,
					"org.projektas.MMK.FactorExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleFactorExpression
entryRuleFactorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorExpressionRule()); }
	iv_ruleFactorExpression=ruleFactorExpression
	{ $current=$iv_ruleFactorExpression.current; }
	EOF;

// Rule FactorExpression
ruleFactorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorExpressionAccess().getLPrimaryParserRuleCall_0_0());
				}
				lv_l_0_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorExpressionRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"org.projektas.MMK.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorExpressionAccess().getAArithmeticsParserRuleCall_1_0());
				}
				lv_a_1_0=ruleArithmetics
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorExpressionRule());
					}
					add(
						$current,
						"a",
						lv_a_1_0,
						"org.projektas.MMK.Arithmetics");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleArithmetics
entryRuleArithmetics returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticsRule()); }
	iv_ruleArithmetics=ruleArithmetics
	{ $current=$iv_ruleArithmetics.current; }
	EOF;

// Rule Arithmetics
ruleArithmetics returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_m_0_1='*'
					{
						newLeafNode(lv_m_0_1, grammarAccess.getArithmeticsAccess().getMAsteriskKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithmeticsRule());
						}
						setWithLastConsumed($current, "m", lv_m_0_1, null);
					}
					    |
					lv_m_0_2='/'
					{
						newLeafNode(lv_m_0_2, grammarAccess.getArithmeticsAccess().getMSolidusKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithmeticsRule());
						}
						setWithLastConsumed($current, "m", lv_m_0_2, null);
					}
					    |
					lv_m_0_3='+'
					{
						newLeafNode(lv_m_0_3, grammarAccess.getArithmeticsAccess().getMPlusSignKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithmeticsRule());
						}
						setWithLastConsumed($current, "m", lv_m_0_3, null);
					}
					    |
					lv_m_0_4='-'
					{
						newLeafNode(lv_m_0_4, grammarAccess.getArithmeticsAccess().getMHyphenMinusKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithmeticsRule());
						}
						setWithLastConsumed($current, "m", lv_m_0_4, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticsAccess().getRPrimaryParserRuleCall_1_0());
				}
				lv_r_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticsRule());
					}
					set(
						$current,
						"r",
						lv_r_1_0,
						"org.projektas.MMK.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getFactorExprParserRuleCall_1_1());
			}
			this_FactorExpr_2=ruleFactorExpr
			{
				$current = $this_FactorExpr_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleFactorExpr
entryRuleFactorExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorExprRule()); }
	iv_ruleFactorExpr=ruleFactorExpr
	{ $current=$iv_ruleFactorExpr.current; }
	EOF;

// Rule FactorExpr
ruleFactorExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorExprAccess().getLPrimaryParserRuleCall_0_0());
				}
				lv_l_0_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorExprRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"org.projektas.MMK.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorExprAccess().getAArithmeticsParserRuleCall_1_0());
				}
				lv_a_1_0=ruleArithmetics
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorExprRule());
					}
					add(
						$current,
						"a",
						lv_a_1_0,
						"org.projektas.MMK.Arithmetics");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getValValueParserRuleCall_0_0());
				}
				lv_val_0_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"val",
						lv_val_0_0,
						"org.projektas.MMK.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUsUnarySuffixParserRuleCall_1_0());
				}
				lv_us_1_0=ruleUnarySuffix
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"us",
						lv_us_1_0,
						"org.projektas.MMK.UnarySuffix");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getValueAccess().getVarVariableCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getValPrimitiveValueParserRuleCall_1_0());
				}
				lv_val_1_0=rulePrimitiveValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"val",
						lv_val_1_0,
						"org.projektas.MMK.PrimitiveValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCreationExpression
entryRuleCreationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreationExpressionRule()); }
	iv_ruleCreationExpression=ruleCreationExpression
	{ $current=$iv_ruleCreationExpression.current; }
	EOF;

// Rule CreationExpression
ruleCreationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCreationExpressionAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreationExpressionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.projektas.MMK.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCreationExpressionAccess().getNameVariableParserRuleCall_1_0());
				}
				lv_name_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreationExpressionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.projektas.MMK.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getCreationExpressionAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCreationExpressionAccess().getValExprBodyParserRuleCall_2_1_0());
					}
					lv_val_3_0=ruleExprBody
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreationExpressionRule());
						}
						set(
							$current,
							"val",
							lv_val_3_0,
							"org.projektas.MMK.ExprBody");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	iv_ruleAssignmentExpression=ruleAssignmentExpression
	{ $current=$iv_ruleAssignmentExpression.current; }
	EOF;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getNameVariableCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getValExprBodyParserRuleCall_2_0());
				}
				lv_val_2_0=ruleExprBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
					}
					set(
						$current,
						"val",
						lv_val_2_0,
						"org.projektas.MMK.ExprBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='check'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getCheckKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getCondConditionalExprParserRuleCall_1_0());
				}
				lv_cond_1_0=ruleConditionalExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"cond",
						lv_cond_1_0,
						"org.projektas.MMK.ConditionalExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getLessThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getThenAbstractElementParserRuleCall_3_0());
				}
				lv_then_3_0=ruleAbstractElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					add(
						$current,
						"then",
						lv_then_3_0,
						"org.projektas.MMK.AbstractElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='>'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getConditionAccess().getElseKeyword_5_0());
				}
			)
			otherlv_6='<'
			{
				newLeafNode(otherlv_6, grammarAccess.getConditionAccess().getLessThanSignKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getElseAbstractElementParserRuleCall_5_2_0());
					}
					lv_else_7_0=ruleAbstractElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						add(
							$current,
							"else",
							lv_else_7_0,
							"org.projektas.MMK.AbstractElement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_8='>'
			{
				newLeafNode(otherlv_8, grammarAccess.getConditionAccess().getGreaterThanSignKeyword_5_3());
			}
		)?
	)
;

// Entry rule entryRuleConditionalExpr
entryRuleConditionalExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalExprRule()); }
	iv_ruleConditionalExpr=ruleConditionalExpr
	{ $current=$iv_ruleConditionalExpr.current; }
	EOF;

// Rule ConditionalExpr
ruleConditionalExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExprAccess().getLeftExprBodyParserRuleCall_0_0());
				}
				lv_left_0_0=ruleExprBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExprRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.projektas.MMK.ExprBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_op_1_1='<'
					{
						newLeafNode(lv_op_1_1, grammarAccess.getConditionalExprAccess().getOpLessThanSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='<='
					{
						newLeafNode(lv_op_1_2, grammarAccess.getConditionalExprAccess().getOpLessThanSignEqualsSignKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
					    |
					lv_op_1_3='>'
					{
						newLeafNode(lv_op_1_3, grammarAccess.getConditionalExprAccess().getOpGreaterThanSignKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_3, null);
					}
					    |
					lv_op_1_4='>='
					{
						newLeafNode(lv_op_1_4, grammarAccess.getConditionalExprAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_4, null);
					}
					    |
					lv_op_1_5='=='
					{
						newLeafNode(lv_op_1_5, grammarAccess.getConditionalExprAccess().getOpEqualsSignEqualsSignKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_5, null);
					}
					    |
					lv_op_1_6='!='
					{
						newLeafNode(lv_op_1_6, grammarAccess.getConditionalExprAccess().getOpExclamationMarkEqualsSignKeyword_1_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_6, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExprAccess().getRightExprBodyParserRuleCall_2_0());
				}
				lv_right_2_0=ruleExprBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExprRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"org.projektas.MMK.ExprBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<F'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.projektas.MMK.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getParamsQualifiedNameParserRuleCall_3_0_0());
					}
					lv_params_3_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"org.projektas.MMK.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOperationAccess().getParamsQualifiedNameParserRuleCall_3_1_1_0());
						}
						lv_params_5_0=ruleQualifiedName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOperationRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"org.projektas.MMK.QualifiedName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getOperationAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getTypeTypeParserRuleCall_6_0());
				}
				lv_type_8_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					set(
						$current,
						"type",
						lv_type_8_0,
						"org.projektas.MMK.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='<'
		{
			newLeafNode(otherlv_9, grammarAccess.getOperationAccess().getLessThanSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getBodyExpressionParserRuleCall_8_0());
				}
				lv_body_10_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"org.projektas.MMK.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11='>'
		{
			newLeafNode(otherlv_11, grammarAccess.getOperationAccess().getGreaterThanSignKeyword_9());
		}
		otherlv_12='F>'
		{
			newLeafNode(otherlv_12, grammarAccess.getOperationAccess().getFKeyword_10());
		}
	)
;

// Entry rule entryRuleWhileExpression
entryRuleWhileExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileExpressionRule()); }
	iv_ruleWhileExpression=ruleWhileExpression
	{ $current=$iv_ruleWhileExpression.current; }
	EOF;

// Rule WhileExpression
ruleWhileExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='till'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileExpressionAccess().getTillKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileExpressionAccess().getEndConditionalExprParserRuleCall_1_0());
				}
				lv_end_1_0=ruleConditionalExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileExpressionRule());
					}
					set(
						$current,
						"end",
						lv_end_1_0,
						"org.projektas.MMK.ConditionalExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileExpressionAccess().getLessThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileExpressionAccess().getLoopAbstractElementParserRuleCall_3_0());
				}
				lv_loop_3_0=ruleAbstractElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileExpressionRule());
					}
					add(
						$current,
						"loop",
						lv_loop_3_0,
						"org.projektas.MMK.AbstractElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='>'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileExpressionAccess().getGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	iv_rulePrimitiveType=rulePrimitiveType
	{ $current=$iv_rulePrimitiveType.current.getText(); }
	EOF;

// Rule PrimitiveType
rulePrimitiveType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='num'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getNumKeyword_0());
		}
		    |
		kw='line'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getLineKeyword_1());
		}
	)
;

// Entry rule entryRulePrimitiveValue
entryRulePrimitiveValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveValueRule()); }
	iv_rulePrimitiveValue=rulePrimitiveValue
	{ $current=$iv_rulePrimitiveValue.current.getText(); }
	EOF;

// Rule PrimitiveValue
rulePrimitiveValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getPrimitiveValueAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getPrimitiveValueAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_VAR_NAME_0=RULE_VAR_NAME
	{
		$current.merge(this_VAR_NAME_0);
	}
	{
		newLeafNode(this_VAR_NAME_0, grammarAccess.getQualifiedNameAccess().getVAR_NAMETerminalRuleCall());
	}
;

// Entry rule entryRuleUnarySuffix
entryRuleUnarySuffix returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnarySuffixRule()); }
	iv_ruleUnarySuffix=ruleUnarySuffix
	{ $current=$iv_ruleUnarySuffix.current.getText(); }
	EOF;

// Rule UnarySuffix
ruleUnarySuffix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='++'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnarySuffixAccess().getPlusSignPlusSignKeyword_0());
		}
		    |
		kw='--'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnarySuffixAccess().getHyphenMinusHyphenMinusKeyword_1());
		}
	)
;

RULE_VAR_NAME : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '#MMK' ( options {greedy=false;} : . )*'MMK#';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
