grammar org.projektas.MMK with org.eclipse.xtext.common.Terminals

generate mMK "http://www.projektas.org/MMK"

Model:
	"<MMK"
	elements += AbstractElement* 
	"MMK>"
	;
	
AbstractElement:
	Statement | Condition | WhileExpression | Operation
;

// Expresions 

Statement:
	Expression
;

Expression: 
	( UnaryExpression| CreationExpression | AssignmentExpression | GetLineExpression | GetNumExpression | PrintExpression) 
;

Type:
	PrimitiveType
;

GetLineExpression:
	"c.getLine" what=Value
;

GetNumExpression:
	"c.getNum" what=Value
;

PrintExpression:
	"c.printL" what=Value
;

Variable:
	name=QualifiedName
;

ExprBody:
	expr+=(FactorExpression)+
;

FactorExpression:
	l=Primary a+=Arithmetics*
;

Arithmetics:
	m=("*" | "/" | "+" | "-") r=Primary
;

Primary:
	UnaryExpression | '(' FactorExpr ')' 
;

FactorExpr:
	l=Primary a+=Arithmetics*
;


UnaryExpression:
	val=Value (us=UnarySuffix)?
;

Value:
	var=[Variable|QualifiedName] | val=PrimitiveValue
;

CreationExpression:
	type=Type name=Variable ("=" val=ExprBody)?
;


AssignmentExpression:
	name=[Variable|QualifiedName] "=" val=ExprBody
;

// check the same as if

Condition:
	"check"  cond=ConditionalExpr 
	 "<"
		then+=(AbstractElement)*
	">"
	(=> "else" "<" 
		else+=(AbstractElement)*
	">")?
;

ConditionalExpr:
	left=ExprBody op=("<" | "<=" | ">" | ">=" | "==" | "!=") right=ExprBody
;

Operation:
  '<F' name=QualifiedName 
  '('(params+=QualifiedName 
    (',' params+=QualifiedName)*)?')'
  ':' type=Type 
  '<'
  body=Expression
  '>'
  'F>'
  ;
// till loop represents while

WhileExpression:
	"till" end=ConditionalExpr 
	 "<"
		loop+=(AbstractElement)*
	 ">" 
;

// misc

PrimitiveType:
	'num' | 'line'
;

PrimitiveValue:
	INT | STRING
;

QualifiedName:
	VAR_NAME
;

UnarySuffix:
	"++" | "--"
;

//========= terminals
terminal VAR_NAME:
	('a'..'z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;

terminal ML_COMMENT:
	'#MMK' -> 'MMK#'
;


